name: 'CD pipeline'

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create release'
        required: true
        type: boolean
        default: 'true'
  push:
    branches: [feature/cd-pipeline,test/*] #TODO: change to main

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      needs_release: ${{ steps.release_check.outputs.needs_release }}

    strategy:
      matrix:
        node-version: [16.x]

    env:
      CI: true
      NODE_OPTIONS: --max-old-space-size=4096

    steps:
      - name: Check of github.event.before
        if: ${{ !github.event.inputs.create_release }}
        run: if [ '${{ github.event.before }}' = '0000000000000000000000000000000000000000' ]; then echo "::warning title=Missing github.event.before::You are running this CD workflow on a newly created branch. Release won't be created..."; fi

      - name: Checkout repository
        uses: actions/checkout@main

      - name: Set up Node.js
        uses: actions/setup-node@main
        with:
          node-version: ${{ matrix.node-version }}

      - run: yarn install --frozen-lockfile

      - name: Fetch previous commit for release check
        if: ${{ github.event.before != '0000000000000000000000000000000000000000' }}
        run: git fetch origin '${{ github.event.before }}'

      - name: Check if release
        id: release_check
        if: ${{ github.event.before != '0000000000000000000000000000000000000000' }}
        run: node scripts/check-if-release.js
        env:
          COMMIT_SHA_BEFORE: '${{ github.event.before }}'

      - name: build type declarations
        run: yarn tsc

      - name: build packages
        run: yarn build

  # A separate release build that is only run for commits that are the result of merging the "Version Packages" PR
  # We can't re-use the output from the above step, but we'll have a guaranteed node_modules cache and
  # only run the build steps that are necessary for publishing
  release:
    needs: build

    if: needs.build.outputs.needs_release == 'true' || github.event.inputs.create_release

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    env:
      CI: 'true'
      NODE_OPTIONS: --max-old-space-size=4096

    steps:
      - name: Checkout repository
        uses: actions/checkout@main

      - name: Set up Node.js
        uses: actions/setup-node@main
        with:
          node-version: ${{ matrix.node-version }}
      - run: yarn install --frozen-lockfile

      - name: build type declarations
        run: yarn tsc

      - name: build packages
        run: yarn backstage-cli repo build

      - name: 'Login to npmjs npm repo .npmrc'
        shell: bash
        run: |
          echo "//registry.npmjs.org/:_authToken=${{secrets.NPM_AUTH_TOKEN}}" > .npmrc
          echo "_auth = ${{ secrets.NPM_CONFIG__AUTH }}" >> .npmrc
          echo "always-auth = true" >> .npmrc
      # Publishes current version of packages that are not already present in the registry.
      - name: Run publish
        run: |
          git config --global user.email "pipelines@oriflame.com"
          git config --global user.name "oriflame-pipeline"
          lerna publish from-package --yes --no-verify-access
      # Creates the next available tag with format "release-<year>-<month>-<day>[.<n>]"
      - name: Create a release tag
        id: create_tag
        run: node scripts/create-release-tag.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Convert the newly created tag into a release with changelog information
      - name: Create release on GitHub
        run: node scripts/create-github-release.js ${{ steps.create_tag.outputs.tag_name }} 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
